
import ply.lex as lex
import ply.yacc as yacc

class MyLexer:
    # Reglas del Lexer
    tokens = (
        'NUMBER', 'PLUS', 'MINUS', 'TIMES', 'DIVIDE', 'POWER', 'MODULO', 'LPAREN', 'RPAREN',
        'FACTORIAL', 'FIBONACCI', 'AND', 'OR', 'NOT', 'LT', 'GT', 'LE', 'GE', 'EQ', 'NE',
        'ASSIGN', 'IF', 'ELSE', 'WHILE', 'TRUE', 'FALSE', 'VARIABLE'
    )

    t_PLUS = r'\+'
    t_MINUS = r'-'
    t_TIMES = r'\*'
    t_DIVIDE = r'/'
    t_POWER = r'\^'
    t_MODULO = r'%'
    t_LPAREN = r'\('
    t_RPAREN = r'\)'
    t_FACTORIAL = r'!'
    t_AND = r'&&'
    t_OR = r'\|\|'
    t_NOT = r'!'
    t_LT = r'<'
    t_GT = r'>'
    t_LE = r'<='
    t_GE = r'>='
    t_EQ = r'=='
    t_NE = r'!='
    t_ASSIGN = r'='
    t_IF = r'Si'
    t_ELSE = r'TAMBIEN'
    t_WHILE = r'MIENTRAS'
    t_TRUE = r'VERDAR'
    t_FALSE = r'FALSOS'

    def t_FIBONACCI(self, t):
        r'fib'
        return t

    def t_ID(self, t):
        r'[a-zA-Z_][a-zA-Z0-9_]*'
        return t

    def t_NUMBER(self, t):
        r'\d+(\.\d+)?'
        if '.' in t.value:
            t.value = float(t.value)
        else:
            t.value = int(t.value)
        return t

    t_ignore = ' \t'

    def t_newline(self, t):
        r'\n+'
        t.lexer.lineno += len(t.value)

    def t_error(self, t):
        print(f"Caracter ilegal '{t.value[0]}'")
        t.lexer.skip(1)

    def build(self, **kwargs):
        self.lexer = lex.lex(module=self, **kwargs)


