import ply.lex as lex
import ply.yacc as yacc

#PARTE LEXICA
#Definición de Palabras reservadas
reservadas = {
    'si' : 'IF',
    'mientras': 'WHILE',
    'imprimir' : 'PRINT',
    'y': 'AND',
    'no':'NOT',
    'o':'OR'
}
# Definición de tokens
tokens = [
    'PUNTOCOMA',
    'LLAVE_IZQ',
    'LLAVE_DER',
    'IGUAL',
    'IGUAL_QUE',
    'MAYOR_QUE',
    'MENOR_QUE',
    'MAYORIGUAL',
    'MENORIGUAL',
    'DIFERENTE_QUE',
    'DOSPUNTOS',
    'NUMERO',
    'SUMA',
    'RESTA',
    'MULTI',
    'DIVISION',
    'PARENTESIS_IZQ',
    'PARENTESIS_DER',
] + list(reservadas.values())

# Expresiones regulares para los tokens
t_SUMA = r'\+'
t_RESTA = r'-'
t_MULTI = r'\*'
t_DIVISION = r'/'
t_PARENTESIS_IZQ = r'\('
t_PARENTESIS_DER = r'\)'
t_PUNTOCOMA = r';'
t_LLAVE_IZQ = r'{'
t_LLAVE_DER = r'}'
t_IGUAL = '='
t_IGUAL_QUE = '=='
t_MAYOR_QUE = '>'
t_MENOR_QUE = '<'
t_MAYORIGUAL = '>='
t_MENORIGUAL = '<='
t_DIFERENTE_QUE = '!='
t_DOSPUNTOS = ':'

# Detectar e Ignorar espacios y saltos de línea
t_ignore = ' \t\n'
#def t_nuevalinea (t):
#    r'\n+'
#    t.lexer.lineno == len(t.value)


def t_NUMERO(t):
    r'\d+'
    t.value = int(t.value)
    return t

def t_COMENTARIO(t):
    r'\#.*'
    pass

#deteccion del identificador para retornarlo
def t_ID(t):
    r'[a-zA-Z][a-zA0-9]*'
    #transforma el token en minusculas
    t.type = reservadas.get(t.value.lower(),'ID')


# Manejo de errores
def t_error(t):
    print(f"Carácter inesperado: '{t.value[0]}'")
    t.lexer.skip(1)

# Construcción del analizador léxico
lexer = lex.lex()

# Reglas de la gramática
def p_expresion(p):
    '''expresion : expresion SUMA termino
                 | expresion RESTA termino
                 | termino'''
    if len(p) == 2:
        p[0] = p[1]
    elif len(p) == 4:
        if p[2] == '+':
            p[0] = p[1] + p[3]
        elif p[2] == '-':
            p[0] = p[1] - p[3]

def p_termino(p):
    '''termino : termino MULTI factor
               | termino DIVISION factor
               | factor'''
    if len(p) == 2:
        p[0] = p[1]
    elif len(p) == 4:
        if p[2] == '*':
            p[0] = p[1] * p[3]
        elif p[2] == '/':
            p[0] = p[1] / p[3]

def p_factor(p):
    '''factor : NUMERO
              | PARENTESIS_IZQ expresion PARENTESIS_DER'''
    if len(p) == 2:
        p[0] = p[1]
    else:
        p[0] = p[2]


# Manejo de errores de sintaxis
def p_error(p):
    print("Error de sintaxis en '%s'" % p.value if p else "Error de sintaxis")

# Construcción del analizador sintáctico
parser = yacc.yacc()


# Ejemplo de uso
if __name__ == '_main_':
    data = input("Ingresa una expresión matemática: ")
    result = parser.parse(data)
    print(f"Resultado: {result}")
