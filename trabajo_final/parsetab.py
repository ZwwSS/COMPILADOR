
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightIGUALrightIGUALQUEleftMAYQUEMENQUEleftMASMENOSleftPORDIVIDIDOleftPARIZQPARDERleftLLAVIZQLLAVDERAND CADENA DECIMAL DIVIDIDO DOSPUNTO ENTERO ID IF IGUAL IGUALQUE LLAVDER LLAVIZQ MAS MAYIGUAL MAYQUE MENIGUAL MENOS MENQUE NIGUALQUE NOT ORD PARDER PARIZQ POR PRINT PTCOMA WHILEinit : instruccionesinstrucciones : instrucciones instruccioninstrucciones : instruccioninstruccion : imprimir_instr\n                   | asignacion_instr\n                   | if_instr\n                   | while_instr\n    if_instr : IF PARIZQ expresion_logica PARDER LLAVIZQ statement LLAVDERstatement : imprimir_instr\n                 | if_instr\n                 | expresion\n                 | while_instr while_instr : WHILE PARIZQ expresion_logica PARDER LLAVIZQ statement LLAVDERasignacion_instr : ID IGUAL expresion PTCOMAexpresion : ENTERO\n                 | DECIMAL\n                 | CADENAexpresion : IDimprimir_instr : PRINT PARIZQ expresion PARDER PTCOMAexpresion : PARIZQ expresion PARDERexpresion_logica : expresion MENQUE expresion\n                        | expresion MAYQUE expresion\n                        | expresion IGUALQUE expresion\n                        | expresion NIGUALQUE expresion\n                        | expresion MAYIGUAL expresion\n                        | expresion MENIGUAL expresion\n    expresion_logica : PARIZQ expresion_logica PARDERexpresion_logica : PARIZQ expresion_logica PARDER MENQUE PARIZQ expresion_logica PARDER\n                        | PARIZQ expresion_logica PARDER MAYQUE PARIZQ expresion_logica PARDER\n                        | PARIZQ expresion_logica PARDER IGUALQUE PARIZQ expresion_logica PARDER\n                        | PARIZQ expresion_logica PARDER NIGUALQUE PARIZQ expresion_logica PARDER\n                        | PARIZQ expresion_logica PARDER MAYIGUAL PARIZQ expresion_logica PARDER\n                        | PARIZQ expresion_logica PARDER MENIGUAL PARIZQ expresion_logica PARDER\n    expresion_logica : PARIZQ expresion_logica PARDER AND PARIZQ expresion_logica PARDER\n                        | PARIZQ expresion_logica PARDER ORD PARIZQ expresion_logica PARDER\n                        | PARIZQ expresion_logica PARDER NOT PARIZQ expresion_logica PARDER\n    expresion : expresion MAS expresion\n                 | expresion MENOS expresion\n                 | expresion POR expresion\n                 | expresion DIVIDIDO expresion\n    '
    
_lr_action_items = {'PRINT':([0,2,3,4,5,6,7,12,34,46,52,59,84,85,],[8,8,-3,-4,-5,-6,-7,-2,-14,-19,8,8,-8,-13,]),'ID':([0,2,3,4,5,6,7,12,13,14,15,16,17,24,30,31,32,33,34,38,39,40,41,42,43,46,52,59,75,76,77,78,79,80,81,82,83,84,85,],[9,9,-3,-4,-5,-6,-7,-2,22,22,22,22,22,22,22,22,22,22,-14,22,22,22,22,22,22,-19,22,22,22,22,22,22,22,22,22,22,22,-8,-13,]),'IF':([0,2,3,4,5,6,7,12,34,46,52,59,84,85,],[10,10,-3,-4,-5,-6,-7,-2,-14,-19,10,10,-8,-13,]),'WHILE':([0,2,3,4,5,6,7,12,34,46,52,59,84,85,],[11,11,-3,-4,-5,-6,-7,-2,-14,-19,11,11,-8,-13,]),'$end':([1,2,3,4,5,6,7,12,34,46,84,85,],[0,-1,-3,-4,-5,-6,-7,-2,-14,-19,-8,-13,]),'PARIZQ':([8,10,11,13,14,15,16,17,24,30,31,32,33,38,39,40,41,42,43,52,59,60,61,62,63,64,65,66,67,68,75,76,77,78,79,80,81,82,83,],[13,15,16,17,17,24,24,17,24,17,17,17,17,17,17,17,17,17,17,17,17,75,76,77,78,79,80,81,82,83,24,24,24,24,24,24,24,24,24,]),'IGUAL':([9,],[14,]),'ENTERO':([13,14,15,16,17,24,30,31,32,33,38,39,40,41,42,43,52,59,75,76,77,78,79,80,81,82,83,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'DECIMAL':([13,14,15,16,17,24,30,31,32,33,38,39,40,41,42,43,52,59,75,76,77,78,79,80,81,82,83,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'CADENA':([13,14,15,16,17,24,30,31,32,33,38,39,40,41,42,43,52,59,75,76,77,78,79,80,81,82,83,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'PARDER':([18,19,20,21,22,25,27,28,35,36,45,47,48,49,50,51,53,54,55,56,57,58,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,],[29,-15,-16,-17,-18,37,44,45,51,45,-20,-37,-38,-39,-40,-27,-21,-22,-23,-24,-25,-26,95,96,97,98,99,100,101,102,103,-28,-29,-30,-31,-32,-33,-34,-35,-36,]),'MAS':([18,19,20,21,22,23,26,28,36,45,47,48,49,50,53,54,55,56,57,58,72,],[30,-15,-16,-17,-18,30,30,30,30,-20,-37,-38,-39,-40,30,30,30,30,30,30,30,]),'MENOS':([18,19,20,21,22,23,26,28,36,45,47,48,49,50,53,54,55,56,57,58,72,],[31,-15,-16,-17,-18,31,31,31,31,-20,-37,-38,-39,-40,31,31,31,31,31,31,31,]),'POR':([18,19,20,21,22,23,26,28,36,45,47,48,49,50,53,54,55,56,57,58,72,],[32,-15,-16,-17,-18,32,32,32,32,-20,32,32,-39,-40,32,32,32,32,32,32,32,]),'DIVIDIDO':([18,19,20,21,22,23,26,28,36,45,47,48,49,50,53,54,55,56,57,58,72,],[33,-15,-16,-17,-18,33,33,33,33,-20,33,33,-39,-40,33,33,33,33,33,33,33,]),'PTCOMA':([19,20,21,22,23,29,45,47,48,49,50,],[-15,-16,-17,-18,34,46,-20,-37,-38,-39,-40,]),'MENQUE':([19,20,21,22,26,36,45,47,48,49,50,51,],[-15,-16,-17,-18,38,38,-20,-37,-38,-39,-40,60,]),'MAYQUE':([19,20,21,22,26,36,45,47,48,49,50,51,],[-15,-16,-17,-18,39,39,-20,-37,-38,-39,-40,61,]),'IGUALQUE':([19,20,21,22,26,36,45,47,48,49,50,51,],[-15,-16,-17,-18,40,40,-20,-37,-38,-39,-40,62,]),'NIGUALQUE':([19,20,21,22,26,36,45,47,48,49,50,51,],[-15,-16,-17,-18,41,41,-20,-37,-38,-39,-40,63,]),'MAYIGUAL':([19,20,21,22,26,36,45,47,48,49,50,51,],[-15,-16,-17,-18,42,42,-20,-37,-38,-39,-40,64,]),'MENIGUAL':([19,20,21,22,26,36,45,47,48,49,50,51,],[-15,-16,-17,-18,43,43,-20,-37,-38,-39,-40,65,]),'LLAVDER':([19,20,21,22,45,46,47,48,49,50,69,70,71,72,73,74,84,85,],[-15,-16,-17,-18,-20,-19,-37,-38,-39,-40,84,-9,-10,-11,-12,85,-8,-13,]),'LLAVIZQ':([37,44,],[52,59,]),'AND':([51,],[66,]),'ORD':([51,],[67,]),'NOT':([51,],[68,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instrucciones':([0,],[2,]),'instruccion':([0,2,],[3,12,]),'imprimir_instr':([0,2,52,59,],[4,4,70,70,]),'asignacion_instr':([0,2,],[5,5,]),'if_instr':([0,2,52,59,],[6,6,71,71,]),'while_instr':([0,2,52,59,],[7,7,73,73,]),'expresion':([13,14,15,16,17,24,30,31,32,33,38,39,40,41,42,43,52,59,75,76,77,78,79,80,81,82,83,],[18,23,26,26,28,36,47,48,49,50,53,54,55,56,57,58,72,72,26,26,26,26,26,26,26,26,26,]),'expresion_logica':([15,16,24,75,76,77,78,79,80,81,82,83,],[25,27,35,86,87,88,89,90,91,92,93,94,]),'statement':([52,59,],[69,74,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instrucciones','init',1,'p_init','sintactico.py',18),
  ('instrucciones -> instrucciones instruccion','instrucciones',2,'p_instrucciones_lista','sintactico.py',22),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones_instruccion','sintactico.py',27),
  ('instruccion -> imprimir_instr','instruccion',1,'p_instruccion','sintactico.py',31),
  ('instruccion -> asignacion_instr','instruccion',1,'p_instruccion','sintactico.py',32),
  ('instruccion -> if_instr','instruccion',1,'p_instruccion','sintactico.py',33),
  ('instruccion -> while_instr','instruccion',1,'p_instruccion','sintactico.py',34),
  ('if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ statement LLAVDER','if_instr',7,'p_if','sintactico.py',39),
  ('statement -> imprimir_instr','statement',1,'p_statement','sintactico.py',45),
  ('statement -> if_instr','statement',1,'p_statement','sintactico.py',46),
  ('statement -> expresion','statement',1,'p_statement','sintactico.py',47),
  ('statement -> while_instr','statement',1,'p_statement','sintactico.py',48),
  ('while_instr -> WHILE PARIZQ expresion_logica PARDER LLAVIZQ statement LLAVDER','while_instr',7,'p_while','sintactico.py',53),
  ('asignacion_instr -> ID IGUAL expresion PTCOMA','asignacion_instr',4,'p_asignacion','sintactico.py',59),
  ('expresion -> ENTERO','expresion',1,'p_asignacion_tipo','sintactico.py',63),
  ('expresion -> DECIMAL','expresion',1,'p_asignacion_tipo','sintactico.py',64),
  ('expresion -> CADENA','expresion',1,'p_asignacion_tipo','sintactico.py',65),
  ('expresion -> ID','expresion',1,'p_expresion_id','sintactico.py',69),
  ('imprimir_instr -> PRINT PARIZQ expresion PARDER PTCOMA','imprimir_instr',5,'p_print','sintactico.py',74),
  ('expresion -> PARIZQ expresion PARDER','expresion',3,'p_expresion_group','sintactico.py',78),
  ('expresion_logica -> expresion MENQUE expresion','expresion_logica',3,'p_expresion_logica','sintactico.py',82),
  ('expresion_logica -> expresion MAYQUE expresion','expresion_logica',3,'p_expresion_logica','sintactico.py',83),
  ('expresion_logica -> expresion IGUALQUE expresion','expresion_logica',3,'p_expresion_logica','sintactico.py',84),
  ('expresion_logica -> expresion NIGUALQUE expresion','expresion_logica',3,'p_expresion_logica','sintactico.py',85),
  ('expresion_logica -> expresion MAYIGUAL expresion','expresion_logica',3,'p_expresion_logica','sintactico.py',86),
  ('expresion_logica -> expresion MENIGUAL expresion','expresion_logica',3,'p_expresion_logica','sintactico.py',87),
  ('expresion_logica -> PARIZQ expresion_logica PARDER','expresion_logica',3,'p_expresion_logica_group','sintactico.py',97),
  ('expresion_logica -> PARIZQ expresion_logica PARDER MENQUE PARIZQ expresion_logica PARDER','expresion_logica',7,'p_expresion_logical_group','sintactico.py',101),
  ('expresion_logica -> PARIZQ expresion_logica PARDER MAYQUE PARIZQ expresion_logica PARDER','expresion_logica',7,'p_expresion_logical_group','sintactico.py',102),
  ('expresion_logica -> PARIZQ expresion_logica PARDER IGUALQUE PARIZQ expresion_logica PARDER','expresion_logica',7,'p_expresion_logical_group','sintactico.py',103),
  ('expresion_logica -> PARIZQ expresion_logica PARDER NIGUALQUE PARIZQ expresion_logica PARDER','expresion_logica',7,'p_expresion_logical_group','sintactico.py',104),
  ('expresion_logica -> PARIZQ expresion_logica PARDER MAYIGUAL PARIZQ expresion_logica PARDER','expresion_logica',7,'p_expresion_logical_group','sintactico.py',105),
  ('expresion_logica -> PARIZQ expresion_logica PARDER MENIGUAL PARIZQ expresion_logica PARDER','expresion_logica',7,'p_expresion_logical_group','sintactico.py',106),
  ('expresion_logica -> PARIZQ expresion_logica PARDER AND PARIZQ expresion_logica PARDER','expresion_logica',7,'p_expresion_operador_logico','sintactico.py',116),
  ('expresion_logica -> PARIZQ expresion_logica PARDER ORD PARIZQ expresion_logica PARDER','expresion_logica',7,'p_expresion_operador_logico','sintactico.py',117),
  ('expresion_logica -> PARIZQ expresion_logica PARDER NOT PARIZQ expresion_logica PARDER','expresion_logica',7,'p_expresion_operador_logico','sintactico.py',118),
  ('expresion -> expresion MAS expresion','expresion',3,'p_expresion_operaciones','sintactico.py',125),
  ('expresion -> expresion MENOS expresion','expresion',3,'p_expresion_operaciones','sintactico.py',126),
  ('expresion -> expresion POR expresion','expresion',3,'p_expresion_operaciones','sintactico.py',127),
  ('expresion -> expresion DIVIDIDO expresion','expresion',3,'p_expresion_operaciones','sintactico.py',128),
]
