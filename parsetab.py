
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND DIFERENTE_QUE DIVISION DOSPUNTOS IF IGUAL IGUAL_QUE LLAVE_DER LLAVE_IZQ MAYORIGUAL MAYOR_QUE MENORIGUAL MENOR_QUE MULTI NOT NUMERO OR PARENTESIS_DER PARENTESIS_IZQ PRINT PUNTOCOMA RESTA SUMA WHILEexpresion : expresion SUMA termino\n                 | expresion RESTA termino\n                 | terminotermino : termino MULTI factor\n               | termino DIVISION factor\n               | factorfactor : NUMERO\n              | PARENTESIS_IZQ expresion PARENTESIS_DER'
    
_lr_action_items = {'NUMERO':([0,5,6,7,8,9,],[4,4,4,4,4,4,]),'PARENTESIS_IZQ':([0,5,6,7,8,9,],[5,5,5,5,5,5,]),'$end':([1,2,3,4,11,12,13,14,15,],[0,-3,-6,-7,-1,-2,-4,-5,-8,]),'SUMA':([1,2,3,4,10,11,12,13,14,15,],[6,-3,-6,-7,6,-1,-2,-4,-5,-8,]),'RESTA':([1,2,3,4,10,11,12,13,14,15,],[7,-3,-6,-7,7,-1,-2,-4,-5,-8,]),'PARENTESIS_DER':([2,3,4,10,11,12,13,14,15,],[-3,-6,-7,15,-1,-2,-4,-5,-8,]),'MULTI':([2,3,4,11,12,13,14,15,],[8,-6,-7,8,8,-4,-5,-8,]),'DIVISION':([2,3,4,11,12,13,14,15,],[9,-6,-7,9,9,-4,-5,-8,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expresion':([0,5,],[1,10,]),'termino':([0,5,6,7,],[2,2,11,12,]),'factor':([0,5,6,7,8,9,],[3,3,3,3,13,14,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expresion","S'",1,None,None,None),
  ('expresion -> expresion SUMA termino','expresion',3,'p_expresion','Compilador_Mat',79),
  ('expresion -> expresion RESTA termino','expresion',3,'p_expresion','Compilador_Mat',80),
  ('expresion -> termino','expresion',1,'p_expresion','Compilador_Mat',81),
  ('termino -> termino MULTI factor','termino',3,'p_termino','Compilador_Mat',91),
  ('termino -> termino DIVISION factor','termino',3,'p_termino','Compilador_Mat',92),
  ('termino -> factor','termino',1,'p_termino','Compilador_Mat',93),
  ('factor -> NUMERO','factor',1,'p_factor','Compilador_Mat',103),
  ('factor -> PARENTESIS_IZQ expresion PARENTESIS_DER','factor',3,'p_factor','Compilador_Mat',104),
]
